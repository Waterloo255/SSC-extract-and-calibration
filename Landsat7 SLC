//Remove the Landsat 7's Scan Line Corrector failure 
// please see the local linear histogram matching technique provided by USGS EROS.
// https://landsat.usgs.gov/sites/default/files/documents/L7SLCGapFilledMethod.pdf
// https://corpora.tika.apache.org/base/docs/govdocs1/257/257855.pdf

// Proposed by J. Li,Chengdu,China
 /****************************************************************************************************************************
 * 
 *                                              function of Remove SLC
 * 
 * **************************************************************************************************************************/

var bands = ['red', 'green', 'blue', 'nir', 'swir']
var percentile = 30
var imageParams = {min: 0.0, max: 0.3, bands: ['red', 'green', 'blue']}

var image = landsat7
.select(['B3','B2','B1','B4','B5'], bands)
.filterBounds(roi)
.filterDate('2012-06-01', '2012-08-01')
// .filter.lt('CLOUD_COVER',50)
.reduce(ee.Reducer.percentile([percentile]))
.rename(bands)
image = image.multiply(0.0001)
Map.addLayer(image, imageParams, "landsat7");
Map.centerObject(roi,8);
//Remove the blemishes on the edges of landsat7
image = image.updateMask(image.select(0).mask().focal_min(90, 'circle', 'meters'))


//Fill SRC bands using Landsat 5
var fill = landsat5
.select(['B3','B2','B1','B4','B5'], bands)
.filterBounds(roi)
.filterDate('2004-01-01', '2005-01-01')
// .filter.lt('CLOUD_COVER',50)
.reduce(ee.Reducer.percentile([percentile]))
.rename(bands)
fill = fill.multiply(0.0001)
Map.addLayer(fill, imageParams, "landsat5");

//Fill the L7 gap
var GapFill = function(src, fill, kernelSize) {
    
  //Parameters
  var MIN_SCALE = 1;
  var MAX_SCALE = 3;
  var MIN_NEIGHBORS = 144;
  
  var kernel = ee.Kernel.square(kernelSize * 30, "meters", false)
  
  //Find the same pixels in two images
  var common = src.mask().and(fill.mask())
  var fc = fill.updateMask(common)
  var sc = src.updateMask(common)

  // Use regression to find the main scaling factors. 
  // Interleaved bands for regression. This assumes the bands have the same name
  var regress = fc.addBands(sc)
  regress = regress.select(regress.bandNames().sort())
  var fit = regress.reduceNeighborhood(ee.Reducer.linearFit().forEach(src.bandNames()),  kernel, null, false)
  var offset = fit.select(".*_offset")
  var scale = fit.select(".*_scale")

  // Find Secondary Scale Factor
  var reducer = ee.Reducer.mean().combine(ee.Reducer.stdDev(), null, true)
  var src_stats = src.reduceNeighborhood(reducer, kernel, null, false)
  var fill_stats = fill.reduceNeighborhood(reducer, kernel, null, false)
  var scale2 = src_stats.select(".*stdDev").divide(fill_stats.select(".*stdDev"))
  var offset2 = src_stats.select(".*mean").subtract(fill_stats.select(".*mean").multiply(scale2))
  var invalid = scale.lt(MIN_SCALE).or(scale.gt(MAX_SCALE))
  scale = scale.where(invalid, scale2)
  offset = offset.where(invalid, offset2)

  // Applying this when all else fails 
  var invalid2 = scale.lt(MIN_SCALE).or(scale.gt(MAX_SCALE))
  scale = scale.where(invalid2, 1)
  offset = offset.where(invalid2, src_stats.select(".*mean").subtract(fill_stats.select(".*mean")))
  var count = common.reduceNeighborhood(ee.Reducer.count(), kernel, null, true, "boxcar")
  var scaled = fill.multiply(scale).add(offset)
      .updateMask(count.gte(MIN_NEIGHBORS))

  return src.unmask(scaled, true)
}


var result = GapFill(image, fill, 10);

//Load the filled landsat7 image
Map.addLayer(result, imageParams, "landsat7 filled");
//export the filled images
Export.image.toDrive({
  image: result,
  description: 'landsat7_result',
  folder:'landsat7',
  scale: 30,

});
